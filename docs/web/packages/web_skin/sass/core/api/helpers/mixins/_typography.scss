// ********************************************************

////
/// Helper mixins pertaining to typography
/// ---
/// @access private
/// @group core.internals.typography
////

//
//   DECLARE MODULE:
//
    $module: 'core/api/helpers/mixins/typography';
    $module: add-api-module($module);
//
//   DEPENDENCY CHECK:
//
    $module-deps: dependencies-met(for $module, function get,
                                                function comma-list,
                                                function is-true,
                                                function color,
                                                function to-decimal,
                                                function to-rem);
//
// ********************************************************


///
/// Reusable CSS text truncation styles
/// ---
/// @since 0.2.0
/// @param {String} $symbol [ellipsis] - symbol to put in-place of truncated text
///
@mixin truncate-text($symbol: ellipsis) {
    overflow: hidden;
    white-space: nowrap;
    text-overflow: $symbol;
}


///
/// Reusable styles for adding a yellow highlight bg to text
/// ---
/// @since 0.3.0
/// ---
/// @param {Bool} $set-text-color [true] - Whether to set the `color` property
///
@mixin text-highlighted($set-text-color: true) {
    background-color: color('highlight.yellow');
    @if $set-text-color {
        color: $text-color;
    }
}


///
/// Reusable styles for rendering text with the same opacity that the `text-muted` CSS utility class applies.
/// ---
/// @since 1.4.0
///
@mixin text-muted() {
    @include opacity(to-decimal($muted-pct));
}


///
/// Webfont utility mixin that extends Compass' built-in `font-face` mixin
/// ---
/// @since 0.4.2
/// ---
/// @param {String} $font-face-name - name of font face
/// @param {String} $font-face      - path to font file
/// @param {Bool}   $weight [false] - font-weight
/// @param {Bool}   $style  [false] - font-style
///
@mixin ws-font-face($font-face-name, $font-face, $weight: false, $style: false) {
    @include font-face(
        $name: $font-face-name,
        $font-files: font-files(
            "#{$font-face}.woff" woff
          , "#{$font-face}.ttf" truetype
        )
        , $eot: false
        , $weight: #{$weight}
        , $style: #{$style}
    );
}


///
/// Reusable styles generated by iterating over each heading selector `<h1>` through `<h6>`
/// ---
/// @since 0.2.0
/// ---
/// @param {String}  $selector  [elem] - Specifies the type of selector to be generated. Accepts `elem` or `class`
/// @param {Boolean} $important [false]
///
@mixin generate-headings($selector: elem, $important: false) {
    // ERROR CHECKING
    $selector: unquote($selector);
    @if not is($selector, elem class) {
        @error "`generate-headings()` mixin expecting 'elem' or 'class' for the `$selector` parameter. Was '#{$selector}'.";
    }
    //
    @each $heading-selector, $heading-config in $headings-config {
        $important: if(is-true($important), '!important', '');
        $heading-selector: if($selector == class, '.#{$heading-selector}', $heading-selector);

        $font-family: get($heading-config, 'font-family');
        $font-size:   get($heading-config, 'font-size');
        $font-weight: get($heading-config, 'font-weight');
        $line-height: get($heading-config, 'line-height');

        #{$heading-selector} {
            @if $selector == class {
                display: block #{$important};
            }

            @include headings-base($important);

            font-family: $font-family #{$important};
            font-size: to-rem($font-size) #{$important};
            font-weight: $font-weight #{$important};
            line-height: $line-height #{$important};
        }
    }
}


///
/// Reusable styles shared by all heading selectors `<h1>` through `<h6>`
/// ---
/// @since 0.2.0
/// @param {Boolean} $important [false]
///
@mixin headings-base($important: false) {
    $important: if(is-true($important), '!important', '');

    margin-top: $headings-margin-top #{$important};
    margin-bottom: $headings-margin-bottom #{$important};
    color: $headings-color #{$important};

    small {
        display: inline-block #{$important};
        font-weight: normal #{$important};
        font-size: floor($font-size-sm-pct - 20) #{$important};
        line-height: 1 #{$important};
        letter-spacing: normal #{$important};
        text-indent: to-rem($spacing-base * 2) #{$important};
    }
}


///
/// Reusable styles for adding "clickable" styling to any header (`<th>`, `<h1>`, etc)
/// ---
/// @since 0.4.0
///
@mixin header-link {
    cursor: pointer;
    color: inherit;
    #{$link-hover-focus} {
        color: $link-color-hover;
        text-decoration: none;
    }
}


///
/// Reusable styles for adding small, centered text labels to action areas like `.btn-vertical` elems
///
@mixin small-action-area-label-text() {
    @include truncate-text(clip);

    display: block;
    margin-right: auto;
    margin-left: auto;
    // Do not set this to 100%, or else you will see
    // Issue 873 come back to life
    width: auto;
    font-size: get($btn-config, 'vertical-label-font-size');
    line-height: get($btn-config, 'vertical-label-line-height');
    text-align: center;
}
