// ********************************************************

////
/// Helper functions pertaining to browser support levels
/// ---
/// @access private
/// @group core.internals.support.browser
////

//
//   DECLARE MODULE:
//
    $module: 'core/api/helpers/functions/browsers';
    $module: add-api-module($module);
//
//   DEPENDENCY CHECK:
//
    $module-deps: dependencies-met(for $module, function is-true,
                                                function is-number,
                                                function to-number,
                                                function comma-list);
//
// ********************************************************


///
/// Generate parent CSS selector(s) to target a specific browser, device or operating system based on the CSS classes generated by the Web Skin `ua-sniffer-decorator.js` plugin (included in `libs.js`).
/// ---
/// @requires {external} SassScript/unquote     <http://bit.ly/sass_unquote>
/// ---
/// @param {String}                 $target      [ua]     - Target selector prefix used by the ua-sniffer-decorator.js plugin
/// @param {String}                 $ua-os       [null]   - Name of browser / os / device you are targeting
/// @param {Number}                 $min-support [1]      - Minimum version of browser / os / device supported
/// @param {String | Number | List} $ver         [all]    - Version / versions you are targeting
/// @param {Boolean}                $append      [true]   - Whether or not to use the `&` operand when building the selector string
/// ---
/// @returns {String | List | Boolean}
///
@function generate-target-version-selectors($target: ua,
                                            $ua-os: null,
                                            $min-support: 1,
                                            $ver: all,
                                            $append: true
                                           )
{
    $version-selector: false;
    $target: unquote($target);
    $append: if($append == true, ' & ', '');

    $version-type: type-of($ver);
    $version-range: false;

    $lt-bracket-index: null;
    $ver-num-str-begin: null;
    $ver-num-str-end: null;


    // ----------------------------------------------------
    //   INITIAL ERROR CHECKING
    //
    //   -> Do as much of this as we can up-front to keep
    //      the logic below clean, and make this function
    //      more performant.
    // ----------------------------------------------------
        $fn-name: '`generate-target-version-selectors`';

        @if not is($version-type, string number list) {
            @error "Function #{$fn-name} expecting type of `$ver` parameter to be `string`, `number` or `list`. Received `#{type-of($ver)}`.";
        }
        @if $version-type == string {
            @if unquote($ver) != all {
                $lt-bracket-index: str-index($ver, '<');
                $ver-num-str-begin: $lt-bracket-index + 1;
                $ver-num-str-end: str-length($ver);
                // slice it
                $version-range: to-number(str-slice($ver, $ver-num-str-begin, $ver-num-str-end));

                @if $lt-bracket-index == -1 {
                    @error "Function #{$fn-name} expecting `<` followed by an integer for the `$ver` parameter value. Received `#{$ver}`.";
                }
                @if ($version-range - 1) < $min-support {
                    // @warn "Function #{$fn-name}: Version is below the minimum supported version. (#{$version-range - 1} < #{$min-support}).";
                    @return false;
                }
            }
        }
        @if $version-type == number {
            @if $ver < 0 {
                @error "Function #{$fn-name} expecting a non-negative numerical value for `$ver` parameter. Received `#{$ver}`.";
            }
            @if floor($ver) < $min-support {
                // @warning "Function #{$fn-name}: Version is below the minimum supported version. (#{floor($ver)} < #{$min-support}).";
                @return false;
            }
        }
        @if not is($target, ua os) {
            @error "Function #{$fn-name} expecting `ua` or `os` for the `$target` parameter value. Received `#{$target}`.";
        }
        @if not is-string($ua-os) {
            @error "Function #{$fn-name} expecting type of `$ua-os` parameter to be `string`. Received `#{type-of($ua-os)}`.";
        }


    // ----------------------------------------------------
    //   SINGLE VERSION
    // ----------------------------------------------------
        @if $version-type == number {
            $version-selector: '.#{$target}-#{$ua-os}#{$ver}#{$append}';
        }


    // ----------------------------------------------------
    //   MULTIPLE / RANGE / ALL VERSIONS
    // ----------------------------------------------------
        @if $version-type == string {
            @if is-true($version-range) {
                // ----- SPECIFIC RANGE ----- //
                $version-selector: '.#{$target}-lt-#{$ua-os}#{$version-range}#{$append}';
            } @else {
                // ----- ALL VERSIONS ----- //
                $version-selector: '.#{$target}-#{$ua-os}#{$append}';
            }
        }


    // ----------------------------------------------------
    //   LIST OF INDIVIDUAL VERSIONS
    // ----------------------------------------------------
        @if $version-type == list {
            $versions: $ver;
            $version-selector-list: comma-list(); // create a new empty list
            $ua-os: unquote($ua-os);
            $valid-version-count: 0;

            @each $version in $versions {
                // ----- ITERATIVE ERROR CHECKING ----- //
                @if not is-number($version) {
                    @error "Function #{$fn-name} expecting type of each item in the `$ver` list to be `number`. `#{$version}` is a `#{type-of($version)}`.";
                } @else {
                    @if $version < 0 {
                        @error "Function #{$fn-name} expecting a non-negative numerical value for each value in `$ver` list. Received `#{$version}`.";
                    }
                }
                // ----- ITERATIVE VERSION LIST WARNING ----- //
                @if floor($version) < $min-support {
                    @warn "Function #{$fn-name}: Version is below the minimum supported version. (#{floor($version)} < #{$min-support}). Excluding this version from the list of selectors.";
                    // continue, assuming there might be some valid versions remaining to target
                } @else {
                    $valid-version-count: $valid-version-count + 1;

                    $version-selector-string: '.#{$target}-#{$ua-os}#{$version}#{$append}';
                    $version-selector-list: append($version-selector-list, unquote($version-selector-string), comma);
                }
            }

            @if $valid-version-count == 0 {
                @warn "Function #{$fn-name}: All versions requested were less than the lowest supported version of `#{$ua-os}` (<#{$min-supported}).";
                @return false;
            } @else {
                $version-selector: $version-selector-list;
            }
        }

    @return $version-selector;
}
