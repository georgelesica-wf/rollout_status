// ********************************************************

////
/// Atoms (building blocks / API methods) for
/// draggable element styles.
/// ---
/// @access public
/// @group core.draggables
/// @since 1.6.0
////

//
//   DECLARE MODULE:
//
    $module: 'core/foundation/tools/atoms/draggables-helpers';
    $module: add-api-module($module);
//
//   DEPENDENCY CHECK:
//
    $module-deps: dependencies-met(for $module, function get);
//
// ********************************************************


///
/// Customize the color of the `box-shadow` that is used to make an outline around a draggable entity while it appears to be dragged.
/// ---
/// @param {Color} $outline-color   [#33a9ff] - The outline color of your draggable element while it appears to be dragged
/// ---
/// @returns {Arglist} - `box-shadow` arglist
///
@function build-is-dragging-outline($outline-color: get($dragging-element-config, 'outline-color')) {
    @return 0 0 0 get($dragging-element-config, 'outline-width') $outline-color;
}

///
/// Customize the color of a series of `box-shadow` values that are used to make an `.is-dragging--multi` element appear to have a "cloned" element sitting beneath it, offset from the top / left.
/// ---
/// @param {Color} $bg-color        [#ffffff] - The background color of your draggable element while it appears to be dragged
/// @param {Color} $outline-color   [#33a9ff] - The outline color of your draggable element while it appears to be dragged
/// ---
/// @returns {List} - Comma-separated list of `box-shadow` arglists
///
@function build-is-dragging-multi-outlines(
    $bg-color: get($dragging-element-config, 'bg-color'),
    $outline-color: get($dragging-element-config, 'outline-color')
) {
    $dragging-outline-width: get($dragging-element-config, 'outline-width');
    // Basic shadow that mimics an outset border in default state
    $dragging-base-outline-shadow: build-is-dragging-outline($outline-color);

    // Outset border + "cloned" offset border appearance generated by 3 total shadows
    $dragging-multi-clone-shadow-offset-y: get($dragging-multi-element-config, 'clone-shadow-offset-y');
    $dragging-multi-clone-shadow-offset-x: get($dragging-multi-element-config, 'clone-shadow-offset-x');
    $dragging-multi-offset-shadow-spacer: $dragging-multi-clone-shadow-offset-x $dragging-multi-clone-shadow-offset-y 0 0 $bg-color;
    $dragging-multi-offset-shadow: $dragging-multi-clone-shadow-offset-x $dragging-multi-clone-shadow-offset-y 0 $dragging-outline-width $outline-color;

    @return $dragging-base-outline-shadow, $dragging-multi-offset-shadow-spacer, $dragging-multi-offset-shadow;
}

///
/// Base reusable styling for an `.is-draggable` element that is being dragged (`.is-dragging`).
///
@mixin is-dragging-base() {
    @include grabbing-cursor(!important);

    //
    // Use box-shadow instead of border so that it does not effect box-model in any way.
    //
    // This will make the dragging / draggable CSS classes more agnostic / applicable to ANY
    // element that a consumer app may want to make draggable since many elements may already
    // have their own border styles.
    //
    box-shadow: build-is-dragging-outline();
    border-radius: get($dragging-element-config, 'outline-radius');
    background-color: get($dragging-element-config, 'bg-color');

    //
    // TODO: Be as wide as the contents of the element, but no narrower than the prescribed
    // min-width, and no wider than the prescribed max-width while being dragged.
    //
    // Not yet implemented because we don't know what the DOM representation will be for an
    // item that is being dragged.  Will the class be added to the draggable item in the DOM?
    // Will the class be applied to a clone?  We'll hold off on making these widths a part of
    // the core Web Skin generated CSS styles for now. Consumers can still utilize / implement
    // the UX  specification min/max widths though - via our Sass API values.
    //

    // display: inline-block;
    // min-width: get($dragging-element-config, 'min-width');
    // max-width: get($dragging-element-config, 'max-width');
}

///
/// Reusable styling for an `.is-draggable` element that represents multiple entities being dragged (`.is-dragging--multi`).
///
@mixin is-dragging-multi() {
    box-shadow: build-is-dragging-multi-outlines();

    // Displays how many entities are being dragged.
    .badge {
        background-color: get($dragging-element-config, 'outline-color');
        color: get($dragging-element-config, 'bg-color');
    }
}

///
/// Base reusable styling for an `.is-draggable` element.
///
@mixin is-draggable-base() {
    @include grab-cursor(!important);

    &,
    * {
        @include disable-user-select();
    }

    &:active {
        @include is-dragging-base();
    }
}
