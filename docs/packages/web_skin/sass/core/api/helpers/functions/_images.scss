// ********************************************************

////
/// Global functions pertaining to image assets
/// ---
/// @access private
/// @group core.internals.utils.images
////

//
//   DECLARE MODULE:
//
    $module: 'core/api/helpers/functions/images';
    $module: add-api-module($module);
//
// ********************************************************


///
/// Parse the file name and path to build a key that will target
/// the image data generated by node/grunt and stored in `core/api/_generated/image-data`.
/// ---
/// @since 1.1.0
/// ---
/// @requires {external} SassScript/unquote <http://bit.ly/sass_unquote>
/// @param {String} $file - Relative image file url
/// @returns {String} - Map key that points to image data for given file within the `$image-data` map.
///
@function image-data($file) {
    $_file: $file;
    $type-key: '';
    $delimiter: '/';

    // Trim out the ../img bit if it exists
    $img-dir-index:  str-index($_file, $images-directory);
    @if $img-dir-index {
        $_file: str-slice($_file, str-length($images-directory) + 1, str-length($_file));
    }

    // Trim out the file extension
    $file-ext-index: str-index($_file, '.');
    @if $file-ext-index {
        $_file: str-slice($_file, 1, $file-ext-index - 1);
    }

    // Trim out any remaining nested directories except for the last one
    $running: true;
    $dirs: comma-list();
    $remaining: $_file;

    @while $running {
        $index: str-index($remaining, $delimiter);

        @if not $index {
            $running: false;
        } @else {
            $dirs: append($dirs, str-slice($remaining, 1, $index - str-length($delimiter)));
            $remaining: str-slice($remaining, $index + str-length($delimiter));
        }
    }

    $_file: $remaining;

    // Extract the directory name containing the image
    @if length($dirs) > 0 {
        $type-key: nth($dirs, length($dirs));
    }

    // Map key for this image
    $image-data-key: unquote('#{unquote($type-key)}-#{$_file}');

    @if not map-has-key($image-data, $image-data-key) {
        @error "Could not find image data for the file '#{$file}' based on the existence of the key '#{$image-data-key}' within the `$image-data` map.";
    }

    @return $image-data-key;
}

///
/// Returns a relative url string for a given image file.
/// ---
/// @since 1.1.0
/// @todo Get cachebuster working
/// ---
/// @param {String}  $file                  - File name without any path information
/// @param {Boolean} $only-path     [false] - Whether or not to return the path to the image, or the path concatenated with the image
/// @param {Boolean} $cachebuster   [false] - DOES NOT WORK AT THIS TIME. Setting to true will do nada.
/// ---
/// @returns {String} - relative URL string for a given image file
///
@function image-url($file, $only-path: false, $cachebuster: false) {
    @if $only-path {
        @return $images-directory;
    } @else {
        @return url('#{$images-directory}#{$file}');
    }
}

///
/// Returns the image height information found in the generated `$image-data` map.
/// ---
/// @since 1.1.0
/// @param {String} $file - File name relative to the `css` directory
/// @returns {Number} - Height of the given image file
///
@function image-height($file) {
    $data: get($image-data, image-data($file));

    @return get($data, height);
}

///
/// Returns the image width information found in the generated `$image-data` map.
/// ---
/// @since 1.1.0
/// @param {String} $file - File name relative to the `css` directory
/// @returns {Number} - Height of the given image file
///
@function image-width($file) {
    $data: get($image-data, image-data($file));

    @return get($data, width);
}


///
/// Calculate the height of a static image based on whether or not it is larger than the height of its container.
/// ---
/// @since 0.4.12
/// ---
/// @param {String}          $file-1x                    - File path and file name for the 1x image
/// @param {Number | Bool}   $container-height [false]   - Height of container to vertically center within.
/// @param {Number}          $offset-vertical  [0]       - How much smaller you want the image to be than the `$container-height`.
/// ---
/// @returns {Number}
///
@function calc-img-retina-height($file-1x, $container-height: false, $offset-vertical: 0) {
    $height-1x: image-height($file-1x);

    //
    // if the image is bigger than its container... scale it down and center it
    // if its smaller than its container... center it
    //
    $container-height-scale: if($container-height, $container-height - ($offset-vertical * 2), 9999px);
    $scale-down-img:         $container-height-scale < $height-1x;

    $final-height: if($scale-down-img == false, $height-1x, $container-height-scale);

    @return $final-height;
}


///
/// Calculate the width of a static image based on its calculated height.
/// ---
/// @since 0.4.12
/// ---
/// @param {String}          $file-1x                    - File path and file name for the 1x image
/// @param {Number | Bool}   $container-height [false]   - Height of container to vertically center within.
/// @param {Number}          $offset-vertical  [0]       - How much smaller you want the image to be than the `$container-height`.
/// ---
/// @returns {Number}
///
@function calc-img-retina-width($file-1x, $container-height: false, $offset-vertical: 0) {
    $width-1x:  image-width($file-1x);
    $height-1x: image-height($file-1x);
    $img-ratio: $width-1x / $height-1x;

    $final-height: calc-img-retina-height($file-1x, $container-height: $container-height, $offset-vertical: $offset-vertical);

    //
    // if the image is bigger than its container... scale it down and center it
    // if its smaller than its container... center it
    //
    $container-height-scale: if($container-height, $container-height, 9999px);
    $scale-down-img:         $container-height-scale < $height-1x;
    $scaled-down-img-width:  round($final-height * $img-ratio);

    $final-width: if($scale-down-img == false, $width-1x, $scaled-down-img-width);

    @return $final-width;
}
