@include describe('[to-rem]') {
    @include describe('when given number is a single px value') {
        @include describe('that is not zero px') {
            @include it('should return the correct rem vaue') {
                $actual: to-rem(10px);

                @include should(expect( $actual ), have-type-of('number'));
                @include should(expect( $actual ), to(be( 1rem )));
            }

            @include describe('and a custom [html-font-size] param value') {
                @include it('should return the correct rem vaue') {
                    $actual: to-rem(10px, 20px);

                    @include should(expect( $actual ), have-type-of('number'));
                    @include should(expect( $actual ), to(be( .5rem )));
                }
            }
        }

        @include describe('that is zero px') {
            @include it('should return unitless zero') {
                $actual: to-rem(0px);

                @include should(expect( $actual ), have-type-of('number'));
                @include should(expect( unitless($actual) ), to(be( true )));
                @include should(expect( $actual ), to(be( 0 )));
            }
        }

        @include describe('that is unitless zero') {
            @include it('should return unitless zero') {
                $actual: to-rem(0);

                @include should(expect( $actual ), have-type-of('number'));
                @include should(expect( unitless($actual) ), to(be( true )));
                @include should(expect( $actual ), to(be( 0 )));
            }
        }
    }

    @include describe('when given a list of numbers') {
        @include describe('that does not contain a zero px value') {
            @include it('should return the correct rem vaue') {
                $actual: to-rem(10px 20px 1px -5px);

                @include should(expect( $actual ), have-type-of('list'));
                @include should(expect( $actual ), to(be( 1rem 2rem .1rem -.5rem )));
            }
        }

        @include describe('that contains a zero px value') {
            @include it('should return the correct rem vaue') {
                $actual: to-rem(10px 20px 0px -5px);

                @include should(expect( $actual ), have-type-of('list'));
                @include should(expect( unitless(nth($actual, 3)) ), to(be( true )));
                @include should(expect( $actual ), to(be( 1rem 2rem 0 -.5rem )));
            }
        }

        @include describe('that contains a unitless zero value') {
            @include it('should return the correct rem vaue') {
                $actual: to-rem(10px 20px 0 -5px);

                @include should(expect( $actual ), have-type-of('list'));
                @include should(expect( unitless(nth($actual, 3)) ), to(be( true )));
                @include should(expect( $actual ), to(be( 1rem 2rem 0 -.5rem )));
            }
        }
    }
}

@include describe('[to-em]') {
    @include describe('when given number is a single px value') {
        @include describe('that is not zero px') {
            @include it('should return the correct em vaue') {
                $actual: to-em(10px);

                @include should(expect( $actual ), have-type-of('number'));
                @include should(expect( inspect($actual) ), to(be( inspect(.7142857143em) )));
            }

            @include describe('and a custom [parent-font-size] param value') {
                @include it('should return the correct em vaue') {
                    $actual: to-em(10px, 10px);

                    @include should(expect( $actual ), have-type-of('number'));
                    @include should(expect( $actual ), to(be( 1em )));
                }
            }
        }

        @include describe('that is zero px') {
            @include it('should return unitless zero') {
                $actual: to-em(0px);

                @include should(expect( $actual ), have-type-of('number'));
                @include should(expect( unitless($actual) ), to(be( true )));
                @include should(expect( $actual ), to(be( 0 )));
            }
        }

        @include describe('that is unitless zero') {
            @include it('should return unitless zero') {
                $actual: to-em(0);

                @include should(expect( $actual ), have-type-of('number'));
                @include should(expect( unitless($actual) ), to(be( true )));
                @include should(expect( $actual ), to(be( 0 )));
            }
        }
    }

    @include describe('when given number is a single rem value') {
        @include it('should return the correct em vaue') {
            $actual: to-em(1rem);

            @include should(expect( $actual ), have-type-of('number'));
            @include should(expect( inspect($actual) ), to(be( inspect(.7142857143em) )));
        }
    }

    @include describe('when [parent-font-size] is a rem value') {
        @include it('should return the correct em vaue') {
            $actual: to-em(10px, 1.4rem);

            @include should(expect( $actual ), have-type-of('number'));
            @include should(expect( inspect($actual) ), to(be( inspect(.7142857143em) )));
        }

        @include describe('and the given number is a single rem value') {
            @include it('should return the correct em vaue') {
                $actual: to-em(1rem, 1.4rem);

                @include should(expect( $actual ), have-type-of('number'));
                @include should(expect( inspect($actual) ), to(be( inspect(.7142857143em) )));
            }
        }
    }

    @include describe('when given a list of numbers') {
        @include describe('that does not contain a zero px value') {
            @include it('should return the correct em vaue') {
                $actual: to-em(10px 20px 1px -5px);

                @include should(expect( $actual ), have-type-of('list'));
                @include should(expect( unit(nth($actual, 1)) ), to(be(em)));
                @include should(expect( unit(nth($actual, 2)) ), to(be(em)));
                @include should(expect( unit(nth($actual, 3)) ), to(be(em)));
                @include should(expect( unit(nth($actual, 4)) ), to(be(em)));
            }
        }

        @include describe('that contains a zero px value') {
            @include it('should return the correct em vaue') {
                $actual: to-em(10px 20px 0px -5px);

                @include should(expect( $actual ), have-type-of('list'));
                @include should(expect( unitless(nth($actual, 3)) ), to(be( true )));
                @include should(expect( unit(nth($actual, 1)) ), to(be(em)));
                @include should(expect( unit(nth($actual, 2)) ), to(be(em)));
                @include should(expect( nth($actual, 3) ), to(equal( 0 )));
                @include should(expect( unit(nth($actual, 4)) ), to(be(em)));
            }
        }

        @include describe('that contains a unitless zero value') {
            @include it('should return the correct em vaue') {
                $actual: to-em(10px 20px 0 -5px);

                @include should(expect( $actual ), have-type-of('list'));
                @include should(expect( unitless(nth($actual, 3)) ), to(be( true )));
                @include should(expect( unit(nth($actual, 1)) ), to(be(em)));
                @include should(expect( unit(nth($actual, 2)) ), to(be(em)));
                @include should(expect( nth($actual, 3) ), to(equal( 0 )));
                @include should(expect( unit(nth($actual, 4)) ), to(be(em)));
            }
        }
    }
}

@include describe('[to-decimal]') {
    @include it('should convert a percentage to its decimal equivalent') {
        $actual: to-decimal(90%);

        @include should(expect( $actual ), have-type-of('number'));
        @include should(expect( $actual ), to(be( .9 )));
    }
}

@include describe('[to-px]') {
    @include describe('when given number is a percentage') {
        @include it('should return a px value rounded to the nearest whole number') {
            $actual: to-px(90%, 14px);

            @include should(expect( $actual ), have-type-of('number'));
            @include should(expect( $actual ), to(be( 13px )));
        }

        @include describe('and [parent-font-size] is of type [rem]') {
            @include it('should return a px value rounded to the nearest whole number') {
                $actual: to-px(90%, 1.4rem);

                @include should(expect( $actual ), have-type-of('number'));
                @include should(expect( $actual ), to(be( 13px )));
            }
        }
    }

    @include describe('when given number is of type [em]') {
        @include it('should return a px value rounded down to the nearest whole number') {
            $actual: to-px(1em, 14px);

            @include should(expect( $actual ), have-type-of('number'));
            @include should(expect( $actual ), to(be( 14px )));
        }

        @include describe('and [parent-font-size] is of type [rem]') {
            @include it('should return a px value rounded down to the nearest whole number') {
                $actual: to-px(1em, 1.4rem);

                @include should(expect( $actual ), have-type-of('number'));
                @include should(expect( $actual ), to(be( 14px )));
            }
        }
    }

    @include describe('when given number is of type [rem]') {
        @include it('should return a px value rounded down to the nearest whole number') {
            $actual: to-px(1rem, 14px);

            @include should(expect( $actual ), have-type-of('number'));
            @include should(expect( $actual ), to(be( 10px )));
        }

        @include describe('and [parent-font-size] is of type [rem]') {
            @include it('should return a px value rounded down to the nearest whole number') {
                $actual: to-px(1rem, 1.4rem);

                @include should(expect( $actual ), have-type-of('number'));
                @include should(expect( $actual ), to(be( 10px )));
            }
        }
    }
}

@include describe('[to-dppx]') {
    @include it('should convert [dpi] to [dppx]') {
        $actual: to-dppx(72dpi);

        @include should(expect( $actual ), have-type-of('number'));
        @include should(expect( $actual ), to(be( .75dppx )));
    }
}

@include describe('[to-dpi]') {
    @include it('should convert [dppx] to [dpi]') {
        $actual: to-dpi(96dppx);

        @include should(expect( $actual ), have-type-of('number'));
        @include should(expect( $actual ), to(be( 1dpi )));
    }
}

@include describe('[unitless-zero]') {
    @include describe('when given value is zero with a unit') {
        @include it('should return unitless zero') {
            $actual: unitless-zero(0px);

            @include should(expect( $actual ), have-type-of('number'));
            @include should(expect( $actual ), to(be( 0 )));
        }
    }

    @include describe('when given value is not zero with a unit') {
        @include it('should return the given value') {
            $actual: unitless-zero(5px);

            @include should(expect( $actual ), have-type-of('number'));
            @include should(expect( $actual ), to(be( 5px )));
        }
    }
}
